name: Auto-merge Dependabot PRs

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read

jobs:
  auto-merge-dependabot:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh jq -y
      
      - name: Configure GitHub CLI
        run: |
          # GitHub CLI will automatically use GH_TOKEN environment variable
          gh auth status
        env:
          GH_TOKEN: ${{ secrets.DEPENDABOT_MERGER_TOKEN }}
      
      - name: Get all repositories from organizations
        id: get_repos
        env:
          GH_TOKEN: ${{ secrets.DEPENDABOT_MERGER_TOKEN }}
        run: |
          echo "Getting repositories from all organizations..."
          
          # Get repositories from VitexSoftware
          VITEX_SOFTWARE_REPOS=$(gh repo list VitexSoftware --limit 200 --json name,owner | jq -r '.[] | "\(.owner.login)/\(.name)"')
          
          # Get repositories from Vitexus  
          VITEXUS_REPOS=$(gh repo list Vitexus --limit 200 --json name,owner | jq -r '.[] | "\(.owner.login)/\(.name)"')
          
          # Get repositories from Spoje-NET
          SPOJE_NET_REPOS=$(gh repo list Spoje-NET --limit 200 --json name,owner | jq -r '.[] | "\(.owner.login)/\(.name)"')
          
          # Combine all repositories
          ALL_REPOS=$(printf '%s\n%s\n%s\n' "$VITEX_SOFTWARE_REPOS" "$VITEXUS_REPOS" "$SPOJE_NET_REPOS" | grep -v '^$')
          
          # Save to file for next step
          echo "$ALL_REPOS" > all_repos.txt
          echo "Found $(echo "$ALL_REPOS" | wc -l) repositories across all organizations"
      
      - name: Find and merge Dependabot PR
        env:
          GH_TOKEN: ${{ secrets.DEPENDABOT_MERGER_TOKEN }}
        run: |
          echo "Starting Dependabot PR search and merge process..."
          
          # Shuffle repositories to distribute load fairly
          SHUFFLED_REPOS=$(shuf all_repos.txt)
          
          # Track if we merged a PR
          MERGED=false
          
          for repo in $SHUFFLED_REPOS; do
            if [ "$MERGED" = true ]; then
              break
            fi
            
            echo "Checking repository: $repo"
            
            # Get open Dependabot PRs for this repository
            PRS=$(gh pr list --repo "$repo" --author "app/dependabot" --state open --json number,title,url --limit 10 2>/dev/null || echo '[]')
            
            if [ "$PRS" != "[]" ] && [ "$PRS" != "" ]; then
              # Get the first PR
              PR_NUMBER=$(echo "$PRS" | jq -r '.[0].number')
              PR_TITLE=$(echo "$PRS" | jq -r '.[0].title')
              PR_URL=$(echo "$PRS" | jq -r '.[0].url')
              
              echo "Found Dependabot PR #$PR_NUMBER in $repo: $PR_TITLE"
              
              # Check if PR is ready to merge
              PR_STATUS=$(gh pr view "$PR_NUMBER" --repo "$repo" --json mergeable,statusCheckRollup 2>/dev/null || echo '{"mergeable":"UNKNOWN","statusCheckRollup":[]}')
              MERGEABLE=$(echo "$PR_STATUS" | jq -r '.mergeable')
              
              # Check CI status - consider it ready if no checks or if checks are successful
              CHECKS_STATE="SUCCESS"
              if echo "$PR_STATUS" | jq -e '.statusCheckRollup[0]' > /dev/null 2>&1; then
                CHECKS_STATE=$(echo "$PR_STATUS" | jq -r '.statusCheckRollup[0].state // "PENDING"')
              fi
              
              echo "PR status - Mergeable: $MERGEABLE, Checks: $CHECKS_STATE"
              
              if [ "$MERGEABLE" = "MERGEABLE" ] && ([ "$CHECKS_STATE" = "SUCCESS" ] || [ "$CHECKS_STATE" = "" ]); then
                echo "PR #$PR_NUMBER is ready to merge. Merging now..."
                
                # Attempt to merge the PR using squash merge
                if gh pr merge "$PR_NUMBER" --repo "$repo" --squash --delete-branch 2>/dev/null; then
                  echo "✅ Successfully merged PR #$PR_NUMBER: $PR_TITLE"
                  echo "PR URL: $PR_URL"
                  MERGED=true
                  
                  # Create a summary for the workflow
                  echo "## ✅ Dependabot PR Merged" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**Repository:** $repo" >> $GITHUB_STEP_SUMMARY
                  echo "**PR:** [#$PR_NUMBER]($PR_URL)" >> $GITHUB_STEP_SUMMARY
                  echo "**Title:** $PR_TITLE" >> $GITHUB_STEP_SUMMARY
                  echo "**Merged at:** $(date)" >> $GITHUB_STEP_SUMMARY
                  
                  break
                else
                  echo "❌ Failed to merge PR #$PR_NUMBER in $repo"
                fi
              else
                echo "⏳ PR #$PR_NUMBER not ready to merge (mergeable: $MERGEABLE, checks: $CHECKS_STATE)"
              fi
            else
              echo "No open Dependabot PRs found in $repo"
            fi
            
            # Small delay to avoid rate limiting
            sleep 1
          done
          
          if [ "$MERGED" = false ]; then
            echo "No mergeable Dependabot PRs found across all repositories"
            echo "## ℹ️ No Dependabot PRs to Merge" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No mergeable Dependabot PRs found across all repositories at $(date)." >> $GITHUB_STEP_SUMMARY
          fi
